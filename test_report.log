Unit test report 

 MOCHA  Testing...



  cloneController.js
    √ createClone does nothing if type null
    √ createClone creates one DOM node as cloneAnchor 
    √ createClone creates child DOM nodes of draggables parameter
    √ createClone sets willChange according to config 
    √ updateClone updates transform property of clone anchor
    √ destroyClone removes clone from DOM

  configPreprocessor.js
    √ preprocessors return expected default config
    √ preprocessors return expected config when changed by user
    √ preprocessors skip store callbacks if draggableOnly
    √ preprocessors skip clone callbacks if cloneType null
    √ preprocessMixinConfig throws if draggable element is not an HTML element
    √ preprocessors throw if arg is not 'draggable' / 'droppable'
    √ preprocessors throw if the selector option does not return DOM element
    √ preprocessors throw if an undefined event is received in the store callback
    √ preprocessors throw if Vuex has not been registered
    √ registerVuexInstance sets connection to vuex dispatch

  directive.js
    √ directive returns install function
    √ directive installer returns object with properties inserted and unbind
    √ inserted calls dragAndDrop with correct parameters
    √ unbind calls dragAndDrop with correct parameters

  dragAndDrop.js - Integration testing
    √ all adhoc event listeners cleaned up 
    √ all delegate event listeners cleaned up
    √ all droppable mouseup callbacks fire before evaluation function
    √ call to removeEventListener mid dragging prevents droppable mouseup callbacks 
    √ if dragging aborted by removeEventListener, dragstop callback gets proper data parameters 
    √ all callbacks fire with parameters 
    √ optional custom dragstart callback fires 
    √ optional custom drag callback fires 
    √ optional custom dragstop callbacks fire when not over droppable 
    √ optional custom dragstop callbacks fire when over droppable 
    √ hotDND drag interops with droppable listeners 
    √ hotDND drop interops with draggable listeners 

  dragAndDrop.js
    √ hotDND calls setup functions with expected parameters
    √ hotDND inits drag operation with expected parameters
    √ hotDND inits drop operation with expected parameters
    √ hotDND throws if a drag operation is started while another one is not finished
    √ hotDND throws if a drop operation is started while a drag operation did not precede
    √ addEventListener calls config parser with config parameter
    √ addEventListener stores draggable listener information
    √ addEventListener adds draggable event listener
    √ addEventListener stores droppable listener information
    √ addEventListener adds droppable event listener
    √ addEventListener throws if callbacks parameter has invalid interface
    √ removeEventListener calls mode verifier with mode parameter
    √ removeEventListener sets draggableGotRemoved if mid dragging
    √ removeEventListener removes draggable listener
    √ removeEventListener removes droppable listener
    √ removeEventListener throws if element parameter not found in listeners list

  helpers.js
    1) getRectAbs returns expected data object
    √ getRectAbs extracts expected values from DOM node
    √ getRectAbs throws for invalid pixel values
    - adapt to change in measurement system

  index.js
    √ index.js provides expected exports
    √ hotDNDMixin returns Vue method mixin
    √ installer calls all utility functions
    √ installer registers store with correct namespace
    √ installer registers directive with correct name

  PubSub.js
    √ PubSub instantiated with properties from static events
    √ PubSub.subscribe adds callback to event array
    √ PubSub.subscribe throws for undefined event
    √ PubSub.notify calls callbacks of events with name and data parameter
    √ PubSub.notify throws for undefined event
    √ PubSub.getEvent returns event name by key
    √ PubSub.getEvent throws for undefined event

  store.js
    √ getters.dragging returns true or false
    √ getters.draggableId returns id of draggable if dragging, or null if not
    √ getters.draggableType returns type of draggable if dragging, or null if not
    √ mutations.set uses correct function
    √ mutations.addCallback adds new callback types
    √ actions.draggable inits state with manadatory event parameters
    √ actions.draggable inits state with optional event parameters
    √ actions.droppable dispatches callback action for matching drag/drop types
    √ actions.droppable passes through data parameter to user action
    √ actions.done resets state
    √ actions.register throws for missing parameters

  Vue directive and mixin integration
    √ Get response from directive 
    √ Get response from mixin 


  75 passing 
  1 pending
  1 failing

  1) helpers.js
       getRectAbs returns expected data object:

      AssertionError [ERR_ASSERTION]: [ 'absX',
  'absY',
  'height',
  'left',
  'offsetX',
  'offsetY',
  'outerHeight',
  'outerWidth',
  'outerX',
  'outerY',
... deepEqual [ 'height',
  'left',
  'outerHeight',
  'outerWidth',
  'outerX',
  'outerY',
  'position',
  'top',
  'width' ]
      + expected - actual

       [
      -  "absX"
      -  "absY"
         "height"
         "left"
      -  "offsetX"
      -  "offsetY"
         "outerHeight"
         "outerWidth"
         "outerX"
         "outerY"
      
      at Context../projects/plugins/dragAndDrop/tests/unit/helpers.js.test (dist\webpack:\projects\plugins\dragAndDrop\tests\unit\helpers.js:57:1)



 MOCHA  Tests completed with 1 failure(s)


System test report 



  Drag and drop
    √ draggable over matching droppable fires 
    √ draggable over non-matching droppable doesn't fire 
    √ draggable over two matching droppables fires twice 
    √ draggable over two droppables where first matches fires for first 
    √ draggable over two droppables where second matches fires for second 
    √ draggable over two matching droppables where first is greedy fires for first 
    √ draggable over obstructing child of matching droppable fires 
    √ draggable without droppable fires dragstop / doesn't fire for droppables 
    √ draggable that is also droppable doesn't fire for itself 

  Dragging general
    √ fixed draggable can be dragged when viewport not at origin 
    √ absolute draggable can be dragged when viewport not at origin 
    √ clone of fixed draggable renders before mousemove when viewport not at origin 
    √ clone of aboslute draggable renders before mousemove when viewport not at origin 
    √ clone has same dimension as element 
    √ clone of draggable with padding, border, margin and scroll bars renders 

  Multi dragging
    √ subset of fixed and absolute draggables can be dragged when viewport not at origin 
    √ clones of fixed and absolute draggable subset render before mousemove when viewport not at origin 
    √ clone anchor has origin at top-left-most draggable 


  18 passing 

