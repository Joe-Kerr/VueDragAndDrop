Unit test report 

 MOCHA  Testing...



  cloneController.js
    √ createClone does nothing if type null
    √ createClone creates one DOM node as cloneAnchor 
    √ createClone creates child DOM nodes of draggables parameter 
    √ createClone sets willChange according to config 
    √ updateClone updates transform property of clone anchor
    √ destroyClone removes clone from DOM

  configPreprocessor.js
    √ preprocessors return expected default config
    √ preprocessors return expected config when changed by user
    √ preprocessors skip store callbacks if draggableOnly
    √ preprocessors skip clone callbacks if cloneType null
    √ preprocessMixinConfig uses vnode to lookup multi drag property
    √ preprocessDirectiveConfig uses vnode.context to lookup multi drag property
    √ preprocessMixinConfig throws if draggable element is not an HTML element
    √ preprocessors throw if arg is not 'draggable' / 'droppable'
    √ preprocessors throw if the selector option does not return DOM element
    √ preprocessors throw if an undefined event is received in the store callback
    √ preprocessors throw if Vuex has not been registered
    √ registerVuexInstance sets connection to vuex dispatch

  directive.js
    √ directive returns install function
    √ directive installer returns object with properties inserted and unbind
    √ inserted calls dragAndDrop with correct parameters
    √ unbind calls dragAndDrop with correct parameters

  dragAndDrop.js - Integration testing
    √ all adhoc event listeners cleaned up 
    √ all delegate event listeners cleaned up
    √ all droppable mouseup callbacks fire before evaluation function
    √ call to removeEventListener mid dragging prevents droppable mouseup callbacks 
    √ if dragging aborted by removeEventListener, dragstop callback gets proper data parameters 
    √ all private callbacks fire with expected parameter properties 
    √ optional custom dragstart callback fires 
    √ optional custom drag callback fires 
    √ optional custom dragstop callbacks fire when not over droppable 
    √ optional custom dragstop callbacks fire when over droppable 
    √ hotDND drag interops with droppable listeners 
    √ hotDND drop interops with draggable listeners 

  dragAndDrop.js
    √ hotDND calls setup functions with expected parameters
    √ hotDND inits drag operation with expected parameters
    √ hotDND inits drop operation with expected parameters
    √ hotDND throws if a drag operation is started while another one is not finished
    √ hotDND throws if a drop operation is started while a drag operation did not precede
    √ addEventListener calls config parser with config parameter
    √ addEventListener stores draggable listener information
    √ addEventListener adds draggable event listener
    √ addEventListener stores droppable listener information
    √ addEventListener adds droppable event listener
    √ addEventListener throws if callbacks parameter has invalid interface
    √ removeEventListener calls mode verifier with mode parameter
    √ removeEventListener sets draggableGotRemoved if mid dragging
    √ removeEventListener removes draggable listener
    √ removeEventListener removes droppable listener
    √ removeEventListener throws if element parameter not found in listeners list

  helpers.js
    √ getRectAbs extracts expected values from absolute DOM node
    √ getRectAbs extracts expected values from fixed DOM node
    √ getRectAbs uses fallback if SVG element's offset coordinates not available
    √ getRectAbs uses only element's rect for non-SVG element that has no offset coordinates
    √ getRectAbs returns expected data object
    √ getRectAbs throws for invalid pixel values

  index.js
    √ index.js provides expected exports
    √ hotDNDMixin returns Vue method mixin
    √ installer calls all utility functions
    √ installer registers store with correct namespace
    √ installer registers directive with correct name

  PubSub.js
    √ PubSub instantiated with properties from static events
    √ PubSub.subscribe adds callback to event array
    √ PubSub.subscribe throws for undefined event
    √ PubSub.notify calls callbacks of events with name and data parameter
    √ PubSub.notify throws for undefined event
    √ PubSub.getEvent returns event name by key
    √ PubSub.getEvent throws for undefined event

  store.js
    √ getters.dragging returns true or false
    √ getters.draggableId returns id of draggable if dragging, or null if not
    √ getters.draggableType returns type of draggable if dragging, or null if not
    √ mutations.set uses correct function
    √ mutations.addCallback adds new callback types
    √ actions.draggable inits state with manadatory event parameters
    √ actions.draggable inits state with optional event parameters
    √ actions.droppable dispatches callback action for matching drag/drop types
    √ actions.droppable passes through data parameter to user action
    √ actions.done resets state
    √ actions.register throws for missing parameters

  Vue directive and mixin integration
    √ Get response from directive 
    √ Get response from mixin 


  81 passing 

 MOCHA  Tests completed successfully


System test report 



  Dragging general
    √ drag and drop provides expected public dragstart parameters 
    √ drag and drop provides expected public dragmove parameters 
    √ drag and drop provides expected public dragstop parameters 
    √ drag and drop provides expected public store action parameters 


  4 passing 

